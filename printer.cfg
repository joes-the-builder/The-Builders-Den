# !Creality CR-X Pro
# printer_size: 300x300x400
# To use this config, with kiauh or menuconig select the AVR atmega2560 and flash over uart
[include Line_Purge.cfg]   
[include KAMP_Settings.cfg]
[include inputshaper.cfg]
[include colourswitchprimeandwipe.cfg]
[exclude_object]

[printer]
kinematics: cartesian
max_velocity: 300
max_accel: 2500
max_z_velocity: 5
max_z_accel: 100
square_corner_velocity: 9.0

[mcu]
serial: /dev/serial/by-id/usb-FTDI_FT232R_USB_UART_AB0MAW69-if00-port0


[mcu rpi]
serial: /tmp/klipper_host_mcu       

[virtual_sdcard]
path: ~/printer_data/gcodes
on_error_gcode: CANCEL_PRINT

[stepper_x]
step_pin: PF0
dir_pin: PF1
enable_pin: !PD7
#step_distance: .0125
microsteps: 16
rotation_distance: 40
endstop_pin: ^PE5
position_endstop: 1
position_min: -1
position_max: 325
homing_speed: 80

[stepper_y]
step_pin: PF6
dir_pin: !PF7
enable_pin: !PF2
microsteps: 16
rotation_distance: 40
endstop_pin: ^PJ1
position_endstop: 1
position_min: -1
position_max: 300
homing_speed: 80

[stepper_z]
step_pin: PL3
dir_pin: !PL1
enable_pin: !PK0
microsteps: 16
rotation_distance: 8
endstop_pin: probe:z_virtual_endstop
position_min: -6
position_max: 400

[safe_z_home]
z_hop: 10
z_hop_speed: 5
home_xy_position: 150, 150
speed: 80

[extruder]
step_pin: PA4
dir_pin: PA6
enable_pin: !PA2
microsteps: 16
rotation_distance: 32.43     ; this will need to be updated based on your extruder gear size read klipper rotation distance info to test and change (this one supplied is for the bigtreetech red version)
nozzle_diameter: 0.400
filament_diameter: 1.750
heater_pin: PB4
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PK5
#control: pid
#pid_kp: 23.044
#pid_ki: 1.995
#pid_kd: 66.540
min_temp: 0
max_temp: 270
min_extrude_temp: 0
pressure_advance: 0.400        ; this will need to be changed based on your printer run klipper pressure advance test 
max_extrude_only_distance: 300
max_extrude_cross_section: 50.0

[extruder_stepper extruder_stepper_1]    ;this is t1 the second extruder 
extruder: extruder
step_pin: PC1
dir_pin: !PC3
enable_pin: !PC7
microsteps: 16
rotation_distance: 32.43      ; also needs to be calibrated 

[heater_bed]
heater_pin: PH5
sensor_type: ATC Semitec 104GT-2
sensor_pin: PK6
control: pid
pid_kp: 66.971
pid_ki: 1.717
pid_kd: 652.968
min_temp: 0
max_temp: 90

[fan]
pin: PH6
max_power: 0.7

[verify_heater extruder]
max_error: 120
check_gain_time: 45
hysteresis: 10
heating_gain: 10

[bltouch]          ; you will need to very some of this section with what you have google bl touch set up and tune
sensor_pin: ^PD3
control_pin: PB5
x_offset: 50
y_offset: -3.5
#z_offset: .05
samples: 2
speed: 6.0
pin_up_touch_mode_reports_triggered: False
 
## -----These settings need to be updated based on your BLTouch mounting position
[bed_mesh]
speed: 180
horizontal_move_z: 5
mesh_min: 60,6
mesh_max: 290,290
probe_count: 7,7
fade_start: 1.0
fade_end: 10.0
mesh_pps: 2, 2
algorithm: bicubic


[bed_screws]
screw1: 25,35
screw2: 35,275
screw3: 275,275
screw4: 275,35
screw5: 150,150

[delayed_gcode welcome_init]
initial_duration: 0.50
gcode:
  START_UP
  #BED_MESH_PROFILE LOAD=default

[gcode_macro START_UP]
description: Set up the printer.
gcode:
  #{% set z_offset = params.Z_OFFSET|default(0.00)|float %}        ; set custom offset here after each z home it will move the nozzle to that offset u set 
  #SET_GCODE_OFFSET Z={z_offset} 
  G90        
  M82        
  G28 X0 Y0
  G0 X150 Y150 F9000
  G92 E0
  PREHEAT                  ; can remove this if you dont want it to preheat on start up 
  BED_MESH_CLEAR
  M118 


[idle_timeout]
gcode:
  TURN_OFF_HEATERS
  G28 X0 Y0
  G0 F6000
  G0 X10 Y150
  M84
  M118 Going to sleep.  
timeout: 1800

[gcode_macro START_PRINT]
description: Print start gcode.
gcode:
  SET_PRINTING ENABLE=True
  {% set first_layer_temperature = params.FIRST_LAYER_TEMPERATURE|default(220)|float %}
  {% set first_layer_bed_temperature = params.FIRST_LAYER_BED_TEMPERATURE|default(60)|float %}
  {% set travel_speed = params.TRAVEL_SPEED|default(100)|float %}
  {% set z_offset = params.Z_OFFSET|default(0.0)|float %}
  G21        
  G90        
  M82        
  M107       
  G21        
  G28       
  M190 S{first_layer_bed_temperature}
  M109 S{first_layer_temperature}
  BED_MESH_CALIBRATE 
  M118 Printing...

[gcode_macro END_PRINT]
description: Print end gcode
gcode:
  {% set travel_speed = params.TRAVEL_SPEED|default(100)|float %}
  M117 Printing complete...
  G91                            
  G1 F200 E-5
  M104 T0 S0                     
  M140 S0                        
  G1 Z30 F12000 E-55     
  M107                           
  G90                            
  G0 F4000 X15 Y300    
  G90                            
  M84                            
  BED_MESH_CLEAR
  SET_PRINTING ENABLE=False


[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  G4 P0
  CANCEL_PRINT_BASE
  BED_MESH_CLEAR
  M114 ; report position
  G91 ; relative mode
  G1 Z30 F10000 ; lift Z by 10mm safely
  G90 ; back to absolute
  G1 E-60 F1600 ; retract filament
  G1 X15 Y300 F4000 ; move head to safe corner
  M107 ; fan off
  M84 ; disable motors
  #M104 S0                  THIS TURNS OFF THE HEATERS I PREFER TO LEAVE HEATERS ON TO MAXIMISE REPRINT TIME AFTER A FAILURE OR TESTING UN HASTAG TO TURN HEATERS OFF DURING CANCEL
  #M140 S0

[gcode_macro Level_Bed]
gcode:
  G28
  BED_SCREWS_ADJUST


[firmware_retraction]
retract_length: 4.0         # how much to retract (in mm)
retract_speed: 40.0         # speed of retraction (mm/s)
unretract_extra_length: 0.0 # extra filament to push after unretract
unretract_speed: 40.0       # speed of unretraction (mm/s)

[pause_resume]

[gcode_arcs]
resolution: 0.1
 
[gcode_macro PREHEAT]
gcode:
  M140 S60
  M104 S220

[gcode_macro M109]
rename_existing: M109.1
gcode:
    {% set myS = params.S|default(0)|int  %}
    # Ignore Tool moves that throw multi extruder sync off in creality 6
    M109.1 S{myS}

[gcode_macro M104]
rename_existing: M104.1
gcode:
    {% set myS = params.S|default(0)|int  %}
    # Ignore Tool moves that throw multi extruder sync off in creality 6
    M104.1 S{myS}


[pause_resume]
recover_velocity: 50.


[display_status]

[respond]


[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
gcode:
  ##### get user parameters or use default ##### 
  {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
  {% set idle_timeout = client.idle_timeout|default(0) %}
  {% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != '' else 0 %}
  {% set restore = False if printer.toolhead.extruder == ''
              else True  if params.RESTORE|default(1)|int == 1 else False %}
  ##### end of definitions #####
  SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{'restore': restore, 'temp': temp}}"
  # set a new idle_timeout value
  {% if idle_timeout > 0 %}
    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}
    SET_IDLE_TIMEOUT TIMEOUT={idle_timeout}
  {% endif %}
  PAUSE_BASE
  {client.user_pause_macro|default("")}
  _TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
variable_last_extruder_temp: {'restore': False, 'temp': 0}
variable_restore_idle_timeout: 0
variable_idle_state: False
gcode:
  ##### get user parameters or use default #####
  {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
  {% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
  {% set sp_move = client.speed_move|default(velocity) %}
  {% set runout_resume = True if client.runout_sensor|default("") == ""     # no runout
                    else True if not printer[client.runout_sensor].enabled  # sensor is disabled
                    else printer[client.runout_sensor].filament_detected %} # sensor status
  {% set can_extrude = True if printer.toolhead.extruder == ''           # no extruder defined in config
                  else printer[printer.toolhead.extruder].can_extrude %} # status of active extruder
  {% set do_resume = False %}
  {% set prompt_txt = [] %}
  ##### end of definitions #####
  #### Printer comming from timeout idle state ####
  {% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}
    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
    {% if last_extruder_temp.restore %}
      # we need to use the unicode (\u00B0) for the Â° as py2 env's would throw an error otherwise 
      RESPOND TYPE=echo MSG='{"Restoring \"%s\" temperature to %3.1f\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }'
      M109 S{last_extruder_temp.temp}
      {% set do_resume = True %}
    {% elif can_extrude %}
      {% set do_resume = True %}
    {% else %} 
      RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
      {% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
    {% endif %}
  #### Printer comming out of regular PAUSE state ####
  {% elif can_extrude %}
    {% set do_resume = True %}
  {% else %}
    RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
    {% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
  {% endif %}
  {% if runout_resume %}
    {% if do_resume %}
      {% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %} # restore idle_timeout time
      {client.user_resume_macro|default("")}
      _CLIENT_EXTRUDE
      RESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}
    {% endif %}
  {% else %}
    RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}'
    {% set _d = prompt_txt.append("\"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}
  {% endif %}
  ##### Generate User Information box in case of abort #####
  {% if not (runout_resume and do_resume) %} 
    RESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"
    {% for element in prompt_txt %}
      RESPOND TYPE=command MSG='{"action:prompt_text %s" % element}' 
    {% endfor %}
    RESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"
    RESPOND TYPE=command MSG="action:prompt_show"
  {% endif %}
  
# Usage: SET_PAUSE_NEXT_LAYER [ENABLE=[0|1]] [MACRO=<name>]
[gcode_macro SET_PAUSE_NEXT_LAYER]
description: Enable a pause if the next layer is reached
gcode:
  {% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
  {% set ENABLE = params.ENABLE|default(1)|int != 0 %}
  {% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}
  SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

# Usage: SET_PAUSE_AT_LAYER [ENABLE=[0|1]] [LAYER=<number>] [MACRO=<name>]
[gcode_macro SET_PAUSE_AT_LAYER]
description: Enable/disable a pause if a given layer number is reached
gcode:
  {% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
  {% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined
             else params.LAYER is defined %}
  {% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}
  {% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}
  SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [bltouch]
#*# z_offset = 1.079
#*#
#*# [input_shaper]
#*# shaper_type_x = mzv
#*# shaper_freq_x = 76.8
#*# shaper_type_y = 2hump_ei
#*# shaper_freq_y = 39.0
#*#
#*# [bed_mesh default]
#*# version = 1
#*# points =
#*# 	  0.158750, 0.092500, 0.035000
#*# 	  0.147500, 0.095000, 0.043750
#*# 	  0.150000, 0.066250, 0.016250
#*# x_count = 3
#*# y_count = 3
#*# mesh_x_pps = 2
#*# mesh_y_pps = 2
#*# algo = lagrange
#*# tension = 0.2
#*# min_x = 125.04899999999999
#*# max_x = 174.849
#*# min_y = 122.44
#*# max_y = 177.42000000000002
#*#
#*# [extruder]
#*# control = pid
#*# pid_kp = 22.174
#*# pid_ki = 1.285
#*# pid_kd = 95.627
